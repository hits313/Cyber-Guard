# 1000 Prompts for AI in Cybersecurity, Pentesting, Bug Bounty, and Linux
1.  Explain the CIA triad.
2.  What is the difference between vulnerability, threat, and risk?
3.  Describe the principle of least privilege.
4.  What is defense in depth?
5.  Explain the purpose of a firewall.
6.  What is the OSI model?
7.  Describe the TCP/IP model.
8.  What is the difference between TCP and UDP?
9.  Explain the concept of encryption.
10. What are the different types of encryption?
11. What is hashing?
12. Explain the purpose of digital signatures.
13. What is a VPN?
14. How does a VPN work?
15. Explain the concept of network segmentation.
16. What is a DMZ?
17. Describe the purpose of an Intrusion Detection System (IDS).
18. What is the difference between an IDS and an Intrusion Prevention System (IPS)?
19. Explain the concept of security auditing.
20. What is a security policy?
21. Describe the different phases of a cyberattack.
22. What is social engineering?
23. Explain phishing attacks.
24. What is malware?
25. Describe the different types of malware.
26. What is a botnet?
27. Explain Distributed Denial of Service (DDoS) attacks.
28. What is SQL injection?
29. Explain Cross-Site Scripting (XSS) attacks.
30. What is Cross-Site Request Forgery (CSRF)?
31. Describe buffer overflow attacks.
32. What is a zero-day vulnerability?
33. Explain the concept of privilege escalation.
34. What is a man-in-the-middle (MitM) attack?
35. Describe ARP spoofing.
36. What is DNS spoofing?
37. Explain the concept of session hijacking.
38. What is a brute-force attack?
39. Describe dictionary attacks.
40. What is a rainbow table attack?
41. Explain the concept of a rootkit.
42. What is steganography?
43. Describe the purpose of honeypots.
44. What is threat modeling?
45. Explain risk assessment.
46. What is vulnerability management?
47. Describe the incident response process.
48. What is computer forensics?
49. Explain the importance of security awareness training.
50. What are the key security certifications?
51. Describe common cybersecurity frameworks (e.g., NIST, ISO 27001).
52. What are the legal and ethical considerations in cybersecurity?
53. Explain data privacy regulations (e.g., GDPR).
54. What is penetration testing?
55. Describe the different types of penetration testing.
56. What are the phases of a penetration test?
57. Explain the concept of black box testing.
58. What is white box testing?
59. Describe gray box testing.
60. What is bug bounty hunting?
61. Explain the bug bounty process.
62. What are common bug bounty platforms?
63. Describe responsible disclosure.
64. What are the ethics of bug bounty hunting?
65. Explain the basics of Linux security.
66. What are Linux file permissions?
67. Describe Linux user management.
68. What is SELinux?
69. Explain AppArmor.
70. What are Linux firewalls (e.g., iptables, firewalld)?
71. Describe common Linux security tools.
72. What are Linux log files?
73. Explain how to secure SSH on Linux.
74. What are common Linux vulnerabilities?
75. Describe techniques for hardening Linux servers.
76. What is virtualization security?
77. Explain cloud security concepts.
78. What are common cloud security threats?
79. Describe security considerations for web applications.
80. What is API security?
81. Explain mobile security best practices.
82. What is IoT security?
83. Describe the security implications of AI.
84. What is blockchain security?
85. Explain the basics of cryptography.
86. What are common cryptographic algorithms?
87. Describe key management best practices.
88. What is network security monitoring?
89. Explain security information and event management (SIEM).
90. What are security automation and orchestration?
91. Describe the role of AI in cybersecurity.
92. What are the challenges in cybersecurity?
93. Explain the future trends in cybersecurity.
94. What is quantum computing's impact on cybersecurity?
95. Describe security considerations for remote work.
96. What is DevSecOps?
97. Explain security in the software development lifecycle (SDLC).
98. What is infrastructure as code (IaC) security?
99. Describe container security.
100. What is serverless security?

## II. Penetration Testing Prompts (101-300)

101. List the tools used in each stage of penetration testing.
102. Explain how to perform reconnaissance on a target website.
103. What Nmap commands would you use to scan for open ports?
104. How do you identify the operating system of a target server?
105. Describe techniques for enumerating user accounts on a target system.
106. What tools can be used to enumerate DNS records?
107. Explain how to perform subdomain enumeration.
108. How do you identify web server technologies?
109. What are common web application vulnerabilities to look for?
110. Describe how to test for SQL injection vulnerabilities.
111. Explain the process of exploiting an SQL injection vulnerability.
112. How do you test for Cross-Site Scripting (XSS) vulnerabilities?
113. What are the different types of XSS attacks?
114. Describe how to perform a Cross-Site Request Forgery (CSRF) attack.
115. How do you test for authentication vulnerabilities?
116. Explain how to bypass authentication mechanisms.
117. What are common session management vulnerabilities?
118. Describe how to test for file upload vulnerabilities.
119. How do you exploit file inclusion vulnerabilities?
120. Explain how to test for command injection vulnerabilities.
121. What are the risks of insecure direct object references (IDOR)?
122. Describe how to test for server-side request forgery (SSRF) vulnerabilities.
123. How do you identify and exploit XML External Entity (XXE) vulnerabilities?
124. Explain how to test for insecure deserialization vulnerabilities.
125. What are the common web server configuration vulnerabilities?
126. Describe how to perform brute-force attacks on web applications.
127. How do you use Burp Suite for web application testing?
128. Explain how to use OWASP ZAP for vulnerability scanning.
129. What are the best practices for reporting penetration testing findings?
130. Describe how to perform penetration testing on APIs.
131. How do you test for vulnerabilities in mobile applications?
132. Explain the process of performing network penetration testing.
133. What tools are used for network vulnerability scanning?
134. Describe how to perform penetration testing on wireless networks.
135. How do you test for vulnerabilities in cloud environments?
136. Explain the security considerations for containerized applications.
137. What are the techniques for testing the security of serverless functions?
138. Describe how to perform social engineering attacks.
139. What are the different types of social engineering attacks?
140. How do you mitigate the risks of social engineering?
141. Explain how to perform penetration testing on IoT devices.
142. What are the security challenges in testing industrial control systems (ICS)?
143. Describe the legal and ethical considerations in penetration testing.
144. How do you obtain proper authorization for penetration testing?
145. Explain the importance of scoping in penetration testing.
146. What are the key performance indicators (KPIs) for penetration testing?
147. Describe how to automate penetration testing tasks.
148. How do you integrate penetration testing into the CI/CD pipeline?
149. Explain the concept of continuous penetration testing.
150. What are the challenges in performing penetration testing in agile environments?
151. Describe how to use Metasploit for penetration testing.
152. How do you develop custom exploits for penetration testing?
153. Explain the use of fuzzing in vulnerability discovery.
154. What are the different types of fuzzing techniques?
155. Describe how to perform static and dynamic analysis of applications.
156. How do you reverse engineer applications for vulnerability discovery?
157. Explain the use of code analysis tools in penetration testing.
158. What are the best practices for securing web servers?
159. Describe how to perform penetration testing on databases.
160. How do you test for vulnerabilities in file storage systems?
161. Explain the security considerations for email servers.
162. What are the techniques for testing the security of network devices?
163. Describe how to perform penetration testing on VoIP systems.
164. How do you test for vulnerabilities in video conferencing systems?
165. Explain the security challenges in testing embedded systems.
166. What are the best practices for securing operating systems?
167. Describe how to perform penetration testing on Active Directory environments.
168. How do you test for vulnerabilities in identity and access management (IAM) systems?
169. Explain the security considerations for single sign-on (SSO) implementations.
170. What are the techniques for testing the security of virtualization platforms?
171. Describe how to perform penetration testing on software-defined networks (SDN).
172. How do you test for vulnerabilities in network function virtualization (NFV) environments?
173. Explain the security challenges in testing blockchain applications.
174. What are the best practices for securing containers?
175. Describe how to perform penetration testing on orchestration platforms (e.g., Kubernetes).
176. How do you test for vulnerabilities in cloud storage services?
177. Explain the security considerations for cloud computing models (IaaS, PaaS, SaaS).
178. What are the techniques for testing the security of cloud-native applications?
179. Describe how to perform penetration testing on microservices architectures.
180. How do you test for vulnerabilities in message queue systems?
181. Explain the security challenges in testing real-time operating systems (RTOS).
182. What are the best practices for securing communication protocols?
183. Describe how to perform penetration testing on industrial IoT (IIoT) devices.
184. How do you test for vulnerabilities in building automation systems (BAS)?
185. Explain the security considerations for healthcare devices.
186. What are the techniques for testing the security of automotive systems?
187. Describe how to perform penetration testing on smart city infrastructure.
188. How do you test for vulnerabilities in aerospace systems?
189. Explain the security challenges in testing military systems.
190. What are the best practices for securing critical infrastructure?
191. Describe how to perform penetration testing on financial systems.
192. How do you test for vulnerabilities in e-commerce platforms?
193. Explain the security considerations for online banking applications.
194. What are the techniques for testing the security of supply chain systems?
195. Describe how to perform penetration testing on voting systems.
196. How do you test for vulnerabilities in election infrastructure?
197. Explain the security challenges in testing artificial intelligence systems.
198. What are the best practices for securing machine learning models?
199. Describe how to perform penetration testing on quantum computing systems.
200. How do you test for vulnerabilities in post-quantum cryptography?

## III. Bug Bounty Prompts (301-500)

301. What are the key differences between penetration testing and bug bounty hunting?
302. Explain the concept of scope in bug bounty programs.
303. How do you identify assets that are in scope for a bug bounty program?
304. What are the different types of vulnerabilities that are typically in scope for bug bounties?
305. Describe the process of submitting a bug report to a bug bounty program.
306. What information should be included in a bug report?
307. How do you write a clear and concise bug report?
308. Explain the importance of providing proof of concept (PoC) in a bug report.
309. What are the different severity levels used in bug bounty programs?
310. How are bug bounty rewards determined?
311. What are the common bug bounty platforms?
312. Describe the features and benefits of HackerOne.
313. Explain the features and benefits of Bugcrowd.
314. What are the key differences between HackerOne and Bugcrowd?
315. How do you choose the right bug bounty platform for your needs?
316. What are the best practices for managing your bug bounty submissions?
317. Describe how to track the status of your bug reports.
318. How do you communicate effectively with bug bounty program administrators?
319. What are the common challenges faced by bug bounty hunters?
320. How do you overcome those challenges?
321. Explain the concept of responsible disclosure.
322. What are the benefits of responsible disclosure?
323. What are the risks of irresponsible disclosure?
324. How do you handle situations where a company is unresponsive to your bug report?
325. What are the ethical considerations in bug bounty hunting?
326. Describe the legal aspects of bug bounty hunting.
327. What are the terms and conditions of bug bounty programs?
328. How do you avoid violating the terms and conditions of a bug bounty program?
329. What are the common mistakes made by bug bounty hunters?
330. How do you avoid those mistakes?
331. Explain the importance of continuous learning in bug bounty hunting.
332. What are the best resources for staying up-to-date on the latest vulnerabilities and exploits?
333. How do you build a strong reputation as a bug bounty hunter?
334. What are the benefits of having a good reputation in the bug bounty community?
335. Describe how to network with other bug bounty hunters.
336. What are the opportunities for career advancement in bug bounty hunting?
337. How do you turn bug bounty hunting into a full-time career?
338. What are the financial aspects of bug bounty hunting?
339. How do you manage your bug bounty earnings?
340. What are the tax implications of bug bounty income?
341. Explain the concept of bug bounty hunting methodologies.
342. What are the different types of bug bounty hunting methodologies?
343. How do you choose the right methodology for a specific target?
344. Describe the process of performing reconnaissance in bug bounty hunting.
345. What tools and techniques are used for reconnaissance in bug bounty hunting?
346. How do you identify potential attack surfaces in a target application?
347. Explain the importance of understanding the business logic of a target application.
348. How do you use the business logic to identify vulnerabilities?
349. What are the common web application vulnerabilities that are often found in bug bounty programs?
350. Describe how to find and exploit SQL injection vulnerabilities in bug bounty programs.
351. How do you identify and exploit Cross-Site Scripting (XSS) vulnerabilities in bug bounty programs?
352. Explain how to find and exploit Cross-Site Request Forgery (CSRF) vulnerabilities in bug bounty programs.
353. What are the best practices for testing for authentication vulnerabilities in bug bounty programs?
354. Describe how to find and exploit authentication bypass vulnerabilities in bug bounty programs.
355. How do you identify and exploit session management vulnerabilities in bug bounty programs?
356. Explain how to find and exploit file upload vulnerabilities in bug bounty programs.
357. What are the security risks associated with file upload vulnerabilities?
358. Describe how to find and exploit file inclusion vulnerabilities in bug bounty programs.
359. How do you identify and exploit command injection vulnerabilities in bug bounty programs?
360. Explain the risks of insecure direct object references (IDOR) in bug bounty programs.
361. What are the best practices for testing for IDOR vulnerabilities?
362. Describe how to find and exploit server-side request forgery (SSRF) vulnerabilities in bug bounty programs.
363. How do you identify and exploit XML External Entity (XXE) vulnerabilities in bug bounty programs?
364. Explain how to find and exploit insecure deserialization vulnerabilities in bug bounty programs.
365. What are the common web server configuration vulnerabilities that are often found in bug bounty programs?
366. Describe how to find and exploit web server configuration vulnerabilities in bug bounty programs.
367. How do you identify and exploit vulnerabilities in APIs in bug bounty programs?
368. Explain the security considerations for mobile applications in bug bounty hunting.
369. What are the common mobile application vulnerabilities that are often found in bug bounty programs?
370. Describe how to find and exploit vulnerabilities in mobile applications in bug bounty programs.
371. How do you test for vulnerabilities in mobile application APIs?
372. Explain the security considerations for cloud environments in bug bounty hunting.
373. What are the common cloud vulnerabilities that are often found in bug bounty programs?
import random

advanced_topics = {
    "Web Exploitation": ["GraphQL Injection", "WebSockets Vulnerabilities", "Client-Side Prototype Pollution"],
    "Cloud Security": ["IAM Misconfigurations", "Container Escape Techniques", "Serverless Function Exploitation"],
    "Reverse Engineering": ["ROP Chain Construction", "Heap Overflow Exploitation", "Kernel Exploitation"],
    "Active Directory": ["Kerberos Attacks", "AD CS Exploitation", "Lateral Movement Techniques"]
}

advanced_templates = [
    "You are a red teamer tasked with exploiting {topic} to gain access to sensitive data. Detail your steps.",
    "Explain the steps to exploit {topic} and then achieve {secondary_goal} on a Linux server.",
    "Compare and contrast the use of Burp Suite vs. ZAP for detecting {topic} vulnerabilities.",
    "Describe advanced techniques to detect and mitigate {topic} in a CI/CD pipeline.",
    "Analyze the following code snippet: `{code_snippet}` and identify potential {topic} vulnerabilities.",
    "Given a scenario where a web application uses {topic}, how would you escalate privileges to a system administrator?",
    "Explain the exploitation of {topic} in the context of a bug bounty program, focusing on maximizing impact.",
    "Describe how {topic} can be leveraged to bypass a Web Application Firewall (WAF).",
    "What are the most effective techniques to prevent {topic} in modern web development frameworks?",
    "How can {topic} be automated using scripting languages like Python or Ruby?",
    "Detail the process of crafting a payload to exploit {topic} in a real-world scenario.",
    "What are the post-exploitation steps after successfully leveraging {topic}?",
    "Explain how to identify and exploit {topic} in a black-box penetration testing scenario.",
    "Describe the forensic analysis process to identify a {topic} attack on a system.",
    "How does the principle of least privilege relate to mitigating the risk of {topic}?"
]

code_snippets = [
    "function processInput(input) { eval(input); }",
    "SELECT * FROM users WHERE username = '$username'",
    "// Code with potential deserialization issue"
]

secondary_goals = ["root access", "database dump", "domain admin privileges"]

advanced_prompts = []

for _ in range(300):  # Generate 300 prompts
    category = random.choice(list(advanced_topics.keys()))
    topic = random.choice(advanced_topics[category])
    template = random.choice(advanced_templates)

    prompt = template.format(
        topic=topic,
        secondary_goal=random.choice(secondary_goals),
        code_snippet=random.choice(code_snippets)
    )
    advanced_prompts.append(prompt)

# Save to file (replace with your desired path)
file_path = "advanced_cybersecurity_prompts.txt"
with open(file_path, "w") as f:
    f.write("\n".join(advanced_prompts))

print(f"Generated {len(advanced_prompts)} advanced prompts and saved to {file_path}")
import random

advanced_topics = {
    "Cloud Security": ["AWS IAM Privilege Escalation", "Azure AD Connect Attacks", "GCP Service Account Abuse", "Kubernetes RBAC Exploitation"],
    "Web Exploitation": ["GraphQL Injection", "WebSockets Vulnerabilities", "Client-Side Prototype Pollution", "XML Parameter Pollution", "Template Injection (Flask)", "OAuth 2.0 Misconfigurations"],
    "Network Security": ["BGP Hijacking", "DNS Rebinding Attacks", "Software-Defined Networking (SDN) Attacks"],
    "Cryptography": ["Padding Oracle Attacks", "Cryptographic Side-Channel Attacks", "Exploiting Weaknesses in TLS 1.3 Implementations"],
    "Reverse Engineering": ["ROP Chain Construction", "Heap Overflow Exploitation", "Kernel Exploitation"],
    "Active Directory": ["Kerberos Attacks", "AD CS Exploitation", "Lateral Movement Techniques"]
}

advanced_templates = [
    "You are a red teamer tasked with exploiting {topic} to gain access to {target_system}. Detail your steps.",
    "Explain the steps to exploit {topic} and then achieve {secondary_goal} on a {os} server.",
    "Compare and contrast the use of {tool1} vs. {tool2} for detecting {topic} vulnerabilities.",
    "Describe advanced techniques to detect and mitigate {topic} in a {dev_process} pipeline.",
    "Analyze the following code snippet: `{code_snippet}` and identify potential {topic} vulnerabilities.",
    "Given a scenario where a web application uses {tech} and is vulnerable to {topic}, how would you escalate privileges to a {privilege_level}?",
    "Explain the exploitation of {topic} in the context of a bug bounty program, focusing on maximizing {impact_metric}.",
    "Describe how {topic} can be leveraged to bypass a {security_control}.",
    "What are the most effective techniques to prevent {topic} in modern {web_framework} applications?",
    "How can {topic} be automated using scripting languages like {scripting_language}?",
    "Detail the process of crafting a payload to exploit {topic} in a real-world {attack_vector} scenario.",
    "What are the post-exploitation steps after successfully leveraging {topic} on a compromised {system_type}?",
    "Explain how to identify and exploit {topic} in a black-box penetration testing scenario targeting a {app_type}.",
    "Describe the forensic analysis process to identify a {topic} attack on a {network_component}.",
    "How does the principle of {security_principle} relate to mitigating the risk of {topic}?",
    "Simulate a real-world attack on a {industry} institution, focusing on exploiting their {technology} endpoints.",
    "Analyze the following network traffic capture and identify indicators of a {network_attack} attack.",
    "Detail the process of exploiting a chain of vulnerabilities, starting with {vuln1} and leading to {vuln2}, to achieve {final_goal}.",
    "Explain how to perform {attack_type} attack on a system running {os_version} and describe the tools you would use.",
    "Describe the process of reverse engineering a {file_type} file to identify and exploit a {vuln_type} vulnerability."
]

code_snippets = [
    "function processInput(input) { eval(input); }",
    "SELECT * FROM users WHERE username = '$username'",
    "// Code with potential deserialization issue",
    "API_KEY = 'YOUR_API_KEY'",
    "<script>document.write(location.hash)</script>"
]

secondary_goals = ["root access", "database dump", "domain admin privileges", "cloud admin access", "code execution"]
target_system = ["a Linux server", "a Windows workstation", "a cloud instance", "a database server", "an IoT device"]
os = ["Linux", "Windows", "macOS", "Android", "iOS"]
tool1 = ["Burp Suite", "ZAP", "Nmap", "Metasploit", "Wireshark"]
tool2 = ["Nikto", "SQLMap", "Responder", "PowerSploit", "tcpdump"]
dev_process = ["CI/CD", "Agile", "Waterfall"]
tech = ["Node.js", "Python/Django", "Java/Spring", ".NET", "PHP"]
privilege_level = ["system administrator", "database administrator", "cloud administrator", "root user", "domain administrator"]
impact_metric = ["data exfiltration", "service disruption", "financial loss", "reputation damage", "complete system compromise"]
security_control = ["Web Application Firewall (WAF)", "Intrusion Detection System (IDS)", "Endpoint Detection and Response (EDR)", "firewall", "antivirus"]
web_framework = ["Flask", "Django", "Ruby on Rails", "ASP.NET", "Spring"]
scripting_language = ["Python", "Ruby", "JavaScript", "PowerShell", "Bash"]
attack_vector = ["API call", "file upload", "user input", "email", "network packet"]
system_type = ["web server", "database server", "mail server", "file server", "DNS server"]
app_type = ["e-commerce site", "online banking app", "social media platform", "CMS", "forum"]
network_component = ["router", "switch", "firewall", "load balancer", "DNS server"]
security_principle = ["least privilege", "defense in depth", "separation of duties", "zero trust", "fail-safe defaults"]
industry = ["financial", "healthcare", "government", "e-commerce", "telecommunications"]
technology = ["REST APIs", "GraphQL", "SOAP", "message queues", "cloud storage"]
network_attack = ["DDoS", "DNS tunneling", "ARP spoofing", "BGP hijacking", "port scanning"]
vuln1 = ["CSRF", "XSS", "SQL Injection", "IDOR", "SSRF"]
vuln2 = ["RCE", "Privilege Escalation", "File Inclusion", "Command Injection", "XXE"]
final_goal = ["account takeover", "data exfiltration", "code execution", "system compromise", "denial of service"]
os_version = ["Windows 10", "Linux (Ubuntu 20.04)", "macOS Monterey"]
file_type = [".exe", ".dll", ".pdf", ".apk"]
vuln_type = ["buffer overflow", "format string", "heap overflow", "integer overflow"]

advanced_prompts = []

for _ in range(300): # Generate 300 prompts
    category = random.choice(list(advanced_topics.keys()))
    topic = random.choice(advanced_topics[category])
    template = random.choice(advanced_templates)

    prompt = template.format(
        topic=topic,
        secondary_goal=random.choice(secondary_goals),
        code_snippet=random.choice(code_snippets),
        target_system=random.choice(target_system),
        os=random.choice(os),
        tool1=random.choice(tool1),
        tool2=random.choice(tool2),
        dev_process=random.choice(dev_process),
        tech=random.choice(tech),
        privilege_level=random.choice(privilege_level),
        impact_metric=random.choice(impact_metric),
        security_control=random.choice(security_control),
        web_framework=random.choice(web_framework),
        scripting_language=random.choice(scripting_language),
        attack_vector=random.choice(attack_vector),
        system_type=random.choice(system_type),
        app_type=random.choice(app_type),
        network_component=random.choice(network_component),
        security_principle=random.choice(security_principle),
        industry=random.choice(industry),
        technology=random.choice(technology),
        network_attack=random.choice(network_attack),
        vuln1=random.choice(vuln1),
        vuln2=random.choice(vuln2),
        final_goal=random.choice(final_goal),
        os_version=random.choice(os_version),
        file_type=random.choice(file_type),
        vuln_type=random.choice(vuln_type)
    )
    advanced_prompts.append(prompt)

# Save to file (replace with your desired path)
file_path = "advanced_cybersecurity_prompts.txt"
with open(file_path, "w") as f:
    f.write("\n".join(advanced_prompts))

print(f"Generated {len(advanced_prompts)} advanced prompts and saved to {file_path}")
import random

advanced_topics = {
    "Web Exploitation": ["GraphQL Injection", "WebSockets Vulnerabilities", "Client-Side Prototype Pollution", "XML Parameter Pollution", "Template Injection (Flask)", "OAuth 2.0 Misconfigurations"],
    "Cloud Security": ["AWS IAM Privilege Escalation", "Azure AD Connect Attacks", "GCP Service Account Abuse", "Kubernetes RBAC Exploitation"],
    "Network Security": ["BGP Hijacking", "DNS Rebinding Attacks", "Software-Defined Networking (SDN) Attacks"],
    "Cryptography": ["Padding Oracle Attacks", "Cryptographic Side-Channel Attacks", "Exploiting Weaknesses in TLS 1.3 Implementations"],
    "Reverse Engineering": ["ROP Chain Construction", "Heap Overflow Exploitation", "Kernel Exploitation"],
    "Active Directory": ["Kerberos Attacks", "AD CS Exploitation", "Lateral Movement Techniques"],
    "Zero-Day Exploits": ["Zero-Day in Web Browser", "Zero-Day in Kernel", "Zero-Day in Office Suite"],
    "Ransomware": ["Ransomware Encryption", "Ransomware Lateral Movement", "Ransomware Data Exfiltration"],
    "Reconnaissance": ["Advanced Network Recon", "OSINT for Initial Access", "Recon for Cloud Infrastructure"]
}

advanced_templates = [
    "**Exam:** Create a multiple-choice question on {topic} with 4 distractors.",
    "**Exam:** Explain, in detail, the process of performing {attack_type} attack for a cybersecurity exam.",
    "**Exam:** Present a scenario: A company is hit with a {ransomware_type} attack. Describe the incident response steps.",
    "You are a red teamer tasked with finding a **zero-day exploit** in {target_software}. Detail your recon and exploitation strategy.",
    "Explain the steps to exploit {topic} and then achieve {secondary_goal} on a {os} server.",
    "Compare and contrast the use of {tool1} vs. {tool2} for detecting {topic} vulnerabilities during **recon**.",
    "Describe advanced techniques to detect and mitigate {topic} in a {dev_process} pipeline, focusing on **zero-day** prevention.",
    "Analyze the following code snippet: `{code_snippet}` and identify potential {topic} vulnerabilities, including potential for **zero-day** exploitation.",
    "Given a scenario where a web application uses {tech} and is vulnerable to {topic}, how would you escalate privileges to a {privilege_level}?",
    "Explain the exploitation of {topic} in the context of a bug bounty program, focusing on maximizing {impact_metric}.",
    "Describe how {topic} can be leveraged to bypass a {security_control}.",
    "What are the most effective techniques to prevent {topic} in modern {web_framework} applications?",
    "How can {topic} (especially in the context of **ransomware**) be automated using scripting languages like {scripting_language}?",
    "Detail the process of crafting a payload to exploit {topic} in a real-world {attack_vector} scenario.",
    "What are the post-exploitation steps after successfully leveraging {topic} on a compromised {system_type} in a **ransomware** attack?",
    "Explain how to identify and exploit {topic} in a black-box penetration testing scenario targeting a {app_type}.",
    "Describe the forensic analysis process to identify a {topic} attack on a {network_component}.",
    "How does the principle of {security_principle} relate to mitigating the risk of {topic}?",
    "Simulate a real-world attack on a {industry} institution, focusing on exploiting their {technology} endpoints and deploying **ransomware**.",
    "Analyze the following network traffic capture obtained during **recon** and identify indicators of a {network_attack} attack.",
    "Detail the process of exploiting a chain of vulnerabilities, starting with {vuln1} and leading to {vuln2}, to achieve {final_goal}.",
    "Explain how to perform {attack_type} attack on a system running {os_version} and describe the tools you would use for **recon** and exploitation.",
    "Describe the process of reverse engineering a {file_type} file to identify and exploit a {vuln_type} **zero-day** vulnerability.",
    "Explain the mechanisms of {ransomware_type} ransomware, including its encryption algorithms and communication methods.",
    "Describe advanced **recon** techniques to identify potential targets for a **ransomware** attack within a large enterprise network.",
    "**Exam:** Explain the different stages of a **zero-day** attack, from discovery to exploitation, in an essay format."
]

code_snippets = [
    "function processInput(input) { eval(input); }",
    "SELECT * FROM users WHERE username = '$username'",
    "// Code with potential deserialization issue",
    "API_KEY = 'YOUR_API_KEY'",
    "<script>document.write(location.hash)</script>",
    "Buffer.alloc(size, data).copy(destination, offset)"
]

secondary_goals = ["root access", "database dump", "domain admin privileges", "cloud admin access", "code execution", "initial foothold", "persistence"]
target_system = ["a Linux server", "a Windows workstation", "a cloud instance", "a database server", "an IoT device", "a SCADA system"]
os = ["Linux", "Windows", "macOS", "Android", "iOS", "Embedded Linux"]
tool1 = ["Burp Suite", "ZAP", "Nmap", "Metasploit", "Wireshark", "IDA Pro"]
tool2 = ["Nikto", "SQLMap", "Responder", "PowerSploit", "tcpdump", "Ghidra"]
dev_process = ["CI/CD", "Agile", "Waterfall", "DevSecOps"]
tech = ["Node.js", "Python/Django", "Java/Spring", ".NET", "PHP", "Ruby on Rails"]
privilege_level = ["system administrator", "database administrator", "cloud administrator", "root user", "domain administrator", "enterprise admin"]
impact_metric = ["data exfiltration", "service disruption", "financial loss", "reputation damage", "complete system compromise", "critical infrastructure shutdown"]
security_control = ["Web Application Firewall (WAF)", "Intrusion Detection System (IDS)", "Endpoint Detection and Response (EDR)", "firewall", "antivirus", "HIDS"]
web_framework = ["Flask", "Django", "Ruby on Rails", "ASP.NET", "Spring", "Express.js"]
scripting_language = ["Python", "Ruby", "JavaScript", "PowerShell", "Bash", "C++"]
attack_vector = ["API call", "file upload", "user input", "email", "network packet", "social engineering"]
system_type = ["web server", "database server", "mail server", "file server", "DNS server", "Active Directory server"]
app_type = ["e-commerce site", "online banking app", "social media platform", "CMS", "forum", "ICS application"]
network_component = ["router", "switch", "firewall", "load balancer", "DNS server", "VPN gateway"]
security_principle = ["least privilege", "defense in depth", "separation of duties", "zero trust", "fail-safe defaults", "assume breach"]
industry = ["financial", "healthcare", "government", "e-commerce", "telecommunications", "critical infrastructure"]
technology = ["REST APIs", "GraphQL", "SOAP", "message queues", "cloud storage", "industrial control systems (ICS)"]
network_attack = ["DDoS", "DNS tunneling", "ARP spoofing", "BGP hijacking", "port scanning", "man-in-the-middle"]
vuln1 = ["CSRF", "XSS", "SQL Injection", "IDOR", "SSRF", "Deserialization"]
vuln2 = ["RCE", "Privilege Escalation", "File Inclusion", "Command Injection", "XXE", "Buffer Overflow"]
final_goal = ["account takeover", "data exfiltration", "code execution", "system compromise", "denial of service", "ransomware deployment"]
os_version = ["Windows 10", "Linux (Ubuntu 20.04)", "macOS Monterey", "Windows Server 2019"]
file_type = [".exe", ".dll", ".pdf", ".apk", ".elf"]
vuln_type = ["buffer overflow", "format string", "heap overflow", "integer overflow", "type confusion"]
ransomware_type = ["Ryuk", "Maze", "LockBit", "WannaCry", "REvil"]

advanced_prompts = []

for _ in range(300):  # Generate 300 prompts
    category = random.choice(list(advanced_topics.keys()))
    topic = random.choice(advanced_topics[category])
    template = random.choice(advanced_templates)

    prompt = template.format(
        topic=topic,
        secondary_goal=random.choice(secondary_goals),
        code_snippet=random.choice(code_snippets),
        target_system=random.choice(target_system),
        os=random.choice(os),
        tool1=random.choice(tool1),
        tool2=random.choice(tool2),
        dev_process=random.choice(dev_process),
        tech=random.choice(tech),
        privilege_level=random.choice(privilege_level),
        impact_metric=random.choice(impact_metric),
        security_control=random.choice(security_control),
        web_framework=random.choice(web_framework),
        scripting_language=random.choice(scripting_language),
        attack_vector=random.choice(attack_vector),
        system_type=random.choice(system_type),
        app_type=random.choice(app_type),
        network_component=random.choice(network_component),
        security_principle=random.choice(security_principle),
        industry=random.choice(industry),
        technology=random.choice(technology),
        network_attack=random.choice(network_attack),
        vuln1=random.choice(vuln1),
        vuln2=random.choice(vuln2),
        final_goal=random.choice(final_goal),
        os_version=random.choice(os_version),
        file_type=random.choice(file_type),
        vuln_type=random.choice(vuln_type),
        ransomware_type=random.choice(ransomware_type)
    )
    advanced_prompts.append(prompt)

# Save to file (replace with your desired path)
file_path = "advanced_cybersecurity_prompts.txt"
with open(file_path, "w") as f:
    f.write("\n".join(advanced_prompts))

print(f"Generated {len(advanced_prompts)} advanced prompts and saved to {file_path}")

import random

advanced_topics = {
    "Zero-Day Exploit Development": [
        "Zero-Day in libpng",
        "Zero-Day in a Windows Kernel driver",
        "Zero-Day in VMware ESXi",
        "Zero-Day in a popular JavaScript framework",
        "Zero-Day in a common PDF rendering library"
    ],
    "Payload Crafting": [
        "Polymorphic payload for EDR evasion",
        "Position-independent shellcode for x86_64",
        "Payload for ARM64 code execution",
        "Reflective DLL injection payload",
        "Shellcode to bypass ASLR"
    ],
    "Code Execution": [
        "Code execution in a Docker container",
        "Code execution in a Chrome renderer process",
        "Escalating code execution to kernel privileges on Linux",
        "Persistence of code execution via scheduled tasks",
        "Code execution in a serverless AWS Lambda function"
    ],
    "Reverse Engineering": [
        "Reverse engineering a proprietary network protocol",
        "Reverse engineering a mobile game's anti-cheat mechanism",
        "Reverse engineering a firmware update for an IoT device"
    ],
    "Cryptography": [
        "Exploiting a side-channel attack on AES",
        "Breaking a custom encryption algorithm used in a legacy system",
        "Attacking a key exchange protocol implementation"
    ],
    "Web Exploitation": [
        "Exploiting a prototype pollution vulnerability in Node.js",
        "Bypassing a context-aware auto-escaping mechanism in a web template engine",
        "Exploiting a race condition in a web application's session handling"
    ]
}

advanced_templates = [
    """
    **Zero-Day Exploit Development:**
    You have discovered a potential zero-day vulnerability in {topic}.
    1.  Detail the steps involved in confirming the vulnerability.
    2.  Provide a proof-of-concept exploit (code or detailed steps).
    3.  Explain how to achieve reliable **code execution** across different versions of the affected software/system.
    4.  Discuss the challenges and limitations you encountered.
    """,

    """
    **Payload Crafting:**
    Describe the process of crafting a {topic}.
    1.  Explain the technical requirements for the payload to achieve its goal.
    2.  Provide example code snippets or assembly instructions.
    3.  Discuss techniques to evade common security measures (e.g., AV, EDR).
    4.  Detail how to adapt the payload for different operating systems or architectures.
    """,

    """
    **Code Execution:**
    Explain how to achieve {topic}.
    1.  Detail the vulnerability that enables code execution.
    2.  Describe the steps required to exploit the vulnerability and gain control of program execution.
    3.  Explain how to elevate privileges or escape sandboxes, if applicable.
    4.  Discuss methods for maintaining persistence of the code execution.
    """,

    """
    **Reverse Engineering:**
    Describe the process of reverse engineering {topic} to identify potential vulnerabilities.
    1.  What tools and techniques would you use?
    2.  What specific aspects of the target would you focus on?
    3.  How would you analyze the target for exploitable conditions?
    4.  What are the challenges and limitations of reverse engineering in this scenario?
    """,

    """
    **Cryptography:**
    Describe how to exploit {topic} to compromise a cryptographic system.
    1.  Explain the underlying cryptographic principles involved.
    2.  Detail the steps of the attack.
    3.  Provide code snippets or examples demonstrating the attack.
    4.  Discuss the countermeasures that can be implemented to prevent such attacks.
    """,

    """
    **Web Exploitation:**
    Describe the process of exploiting {topic} in a modern web application.
    1.  Explain the vulnerability in detail.
    2.  Provide example HTTP requests or JavaScript code to demonstrate the exploit.
    3.  Describe how to achieve code execution or other significant impact.
    4.  What are the limitations and challenges in exploiting this type of vulnerability?
    """
]

code_snippets = [
    "// Example code with a buffer overflow",
    "eval(user_input)",
    "SELECT * FROM users WHERE username = '$username'",
    "API_KEY = 'YOUR_API_KEY'",
    "<script>document.write(location.hash)</script>",
    "Buffer.alloc(size, data).copy(destination, offset)",
    "memcpy(dest, src, size)"
]

target_environments = [
    "Windows 10",
    "Linux (Ubuntu 22.04)",
    "macOS Ventura",
    "Android 13",
    "iOS 16",
    "Docker container",
    "AWS Lambda function",
    "Kubernetes pod",
    "VMware ESXi hypervisor"
]

architectures = ["x86", "x86_64", "ARM", "ARM64", "MIPS"]

os_components = ["Windows Kernel", "Linux Kernel", "systemd", "OpenSSL", "a web browser's JavaScript engine"]

javascript_frameworks = ["React", "Angular", "Vue.js", "Node.js"]

secondary_goals = ["root access", "database dump", "domain admin privileges", "cloud admin access", "code execution", "persistence", "sandbox escape"]

tools = ["GDB", "IDA Pro", "Wireshark", "Metasploit", "Pwntools"]

impact_metrics = ["data exfiltration", "service disruption", "financial loss", "reputation damage", "complete system compromise", "remote code execution"]

security_controls = ["Web Application Firewall (WAF)", "Intrusion Detection System (IDS)", "Endpoint Detection and Response (EDR)", "Address Space Layout Randomization (ASLR)", "Data Execution Prevention (DEP)"]

attack_vectors = ["API calls", "file uploads", "user input", "email attachments", "network packets", "social engineering"]

advanced_prompts = []

for _ in range(300): # Generate 300 prompts
    category = random.choice(list(advanced_topics.keys()))
    topic = random.choice(advanced_topics[category])
    template = random.choice(advanced_templates)

    prompt = template.format(
        topic=topic,
        code_snippet=random.choice(code_snippets),
        target_env=random.choice(target_environments),
        arch=random.choice(architectures),
        os_component=random.choice(os_components),
        js_framework=random.choice(javascript_frameworks),
        secondary_goal=random.choice(secondary_goals),
        tool=random.choice(tools),
        impact_metric=random.choice(impact_metrics),
        security_control=random.choice(security_controls),
        attack_vector=random.choice(attack_vectors)
    )
    advanced_prompts.append(prompt)

# Save to file (replace with your desired path)
file_path = "advanced_cybersecurity_prompts.txt"
with open(file_path, "w") as f:
    f.write("\n".join(advanced_prompts))

print(f"Generated {len(advanced_prompts)} advanced prompts and saved to {file_path}")

import random

advanced_topics = {
    "RCE via Image Uploads": [
        "RCE via ImageMagick exploit",
        "Bypassing file type validation for PHP upload",
        "Steganography to hide shellcode in PNG"
    ],
    "HackerOne Report Analysis": [
        "Analyze HackerOne report for RCE in Express.js",
        "Exploit SSRF described in HackerOne report on e-commerce site",
        "Summarize and explain XSS chain in HackerOne report"
    ],
    "Advanced RCE Techniques": [
        "RCE via Java deserialization",
        "RCE via format string in C program",
        "RCE in Python web application"
    ],
    "WebAssembly Exploitation": [
        "Exploiting buffer overflow in WebAssembly",
        "Crafting a WebAssembly payload to call JavaScript",
        "Bypassing WebAssembly sandbox"
    ]
}

advanced_templates = [
    """
    **RCE via Image Uploads:**
    Describe how to achieve RCE by exploiting {topic}.
    1.  Provide example code (if applicable) showing the vulnerable code or upload mechanism.
    2.  Craft a malicious image file (or explain how to create one) that triggers the vulnerability.
    3.  Detail the steps to execute arbitrary code on the server.
    4.  Discuss mitigation strategies to prevent this type of attack.
    """,

    """
    **HackerOne Report Analysis:**
    Analyze the following (simplified) description of a HackerOne report: '{hackerone_report_description}'
    1.  Explain the root cause of the vulnerability.
    2.  Provide a detailed step-by-step guide to reproduce the vulnerability.
    3.  If possible, provide code to exploit the vulnerability.
    4.  Suggest code-level fixes to prevent this vulnerability.
    """,

    """
    **Advanced RCE Techniques:**
    Explain how to achieve RCE via {topic}.
    1.  Provide a code example demonstrating the vulnerability.
    2.  Craft a payload (code or detailed steps) to exploit the vulnerability.
    3.  Detail the steps to achieve reliable code execution.
    4.  Discuss the limitations and challenges of this type of exploit.
    """,

    """
    **WebAssembly Exploitation:**
    Describe how to exploit {topic} in a web application using WebAssembly.
    1.  Provide an example of vulnerable WebAssembly code.
    2.  Craft a payload to exploit the vulnerability.
    3.  Explain how to achieve code execution outside the WebAssembly sandbox (if applicable).
    4.  Discuss the security implications of WebAssembly in web applications.
    """
]

code_snippets = [
    "// Vulnerable PHP code\n$filetype = $_FILES['userfile']['type'];\nif ($filetype == 'image/jpeg') { move_uploaded_file(...); }",
    "// ImageMagick command (vulnerable)\nexec('convert $input -resize 100x100 $output');",
    "// Java Deserialization\nObjectInputStream ois = new ObjectInputStream(fileInputStream); ois.readObject();",
    "// Format string vulnerability\nprintf(user_input);",
    """
    // Example WebAssembly (simplified)
    (module
    (func (export "add") (param $p1 i32) (param $p2 i32) (result i32)
        local.get $p1
        local.get $p2
        i32.add))
    """
]

hackerone_report_descriptions = [
    "A server-side request forgery (SSRF) vulnerability was found in the image resizing functionality, allowing attackers to read internal files.",
    "A cross-site scripting (XSS) vulnerability was discovered in the comment section, allowing attackers to inject malicious JavaScript.",
    "A SQL injection vulnerability was found in the user authentication system, allowing attackers to bypass login.",
    "A deserialization vulnerability was found in the application's handling of user-provided data, leading to remote code execution.",
    "An unauthenticated API endpoint allowed attackers to access sensitive user information."
]

advanced_prompts = []

for _ in range(300):
    category = random.choice(list(advanced_topics.keys()))
    topic = random.choice(advanced_topics[category])
    template = random.choice(advanced_templates)

    prompt = template.format(
        topic=topic,
        code_snippet=random.choice(code_snippets),
        hackerone_report_description=random.choice(hackerone_report_descriptions)
    )
    advanced_prompts.append(prompt)

# Save to file
file_path = "advanced_cybersecurity_prompts.txt"
with open(file_path, "w") as f:
    f.write("\n".join(advanced_prompts))

print(f"Generated {len(advanced_prompts)} prompts and saved to {file_path}")
### Cybersecurity Awareness Prompts

These prompts are designed to help an AI generate content for security awareness training or to explain security concepts to non-technical users.

**1. Phishing Simulations:**

* "Create an example of a phishing email targeting employees of a bank, focusing on urgency and impersonation."
* "Design a quiz to test employees' ability to identify phishing emails, including different techniques (spear phishing, whaling, etc.)."
* "Develop a scenario for a social engineering attack that uses a fake phone call and email combination."

**2. Password Security:**

* "Explain in simple terms why using 'password123' is a bad idea and provide guidelines for creating strong passwords."
* "Create a short video script demonstrating how password managers work and their benefits."
* "Design an interactive exercise to teach users about multi-factor authentication (MFA) and its importance."

**3. Data Handling:**

* "Develop a training module on the proper handling of sensitive customer data, including compliance with data privacy regulations (e.g., GDPR, CCPA)."
* "Create a checklist for employees working remotely to ensure they are securing company data."
* "Design a poster campaign to promote awareness of the risks of sharing confidential information on social media."

**4. Security Updates:**

* "Explain why it's crucial to install software updates promptly and the potential consequences of neglecting them."
* "Create a guide on how to update common software and operating systems (Windows, macOS, mobile devices)."
* "Develop a communication plan to inform employees about a critical security vulnerability and the steps they need to take."

**5. Insider Threats:**

* "Create a training session to help employees recognize and report suspicious behavior that could indicate an insider threat."
* "Develop a case study of a real-world insider threat incident and its impact on the organization."
* "Explain the importance of access control and least privilege in mitigating insider threats."

**6. Physical Security:**

* "Design a training module on physical security best practices, such as securing workstations and protecting access badges."
* "Create a scenario involving a physical security breach and ask users to identify the security failures."
* "Develop guidelines for employees traveling with company devices and sensitive information."

**7. Mobile Security:**

* "Explain the risks of using public Wi-Fi on mobile devices and provide recommendations for secure mobile communication."
* "Create a guide on how to protect mobile devices from malware and phishing attacks."
* "Develop a policy for employees using personal devices for work (BYOD) and the security measures required."

**8. Ransomware Awareness:**

* "Explain what ransomware is, how it works, and the potential impact on an organization."
* "Create a simulation of a ransomware attack (e.g., a fake encrypted file) to demonstrate the consequences."
* "Provide guidelines on how to prevent ransomware infections and what to do in case of an attack."

### Data Breach Prompts

These prompts focus on understanding the causes, consequences, and prevention of data breaches.

**1. Breach Analysis:**

* "Analyze the [Name of a specific data breach] and explain the vulnerability that was exploited."
* "Compare and contrast the causes and consequences of three major data breaches (e.g., Equifax, Yahoo, Marriott)."
* "Describe the typical steps an attacker takes to exfiltrate data during a breach."

**2. Vulnerability Exploitation:**

* "Explain how a SQL injection attack could lead to a data breach in a web application."
* "Describe how a zero-day vulnerability in a file transfer protocol could be exploited to steal sensitive files."
* "Detail the steps involved in exploiting a misconfigured cloud storage service to access confidential data."

**3. Impact and Consequences:**

* "Discuss the legal and financial consequences of a data breach for an organization."
* "Explain the impact of a data breach on affected individuals, including identity theft and reputational damage."
* "Analyze the long-term effects of a data breach on customer trust and brand loyalty."

**4. Detection and Response:**

* "Describe the key steps in an incident response plan following a data breach."
* "Explain how security information and event management (SIEM) systems can help detect and respond to data breaches."
* "Discuss the importance of forensic analysis in determining the cause and extent of a data breach."

**5. Prevention and Mitigation:**

* "Recommend security best practices to prevent common types of data breaches, such as SQL injection and phishing."
* "Explain the role of encryption in protecting data at rest and in transit."
* "Discuss the importance of regular security audits and vulnerability assessments in identifying and addressing potential weaknesses."

**6. Specific Industry Breaches:**

* "Analyze the unique challenges and vulnerabilities in protecting data in the healthcare industry and provide prevention strategies."
* "Describe common data breach scenarios in the financial industry and recommend security measures to mitigate risks."
* "Discuss the specific data security concerns for e-commerce businesses and how to protect customer payment information."

**7. Emerging Threats:**

* "Explain how the rise of cloud computing has changed the landscape of data breaches and the new security challenges it presents."
* "Discuss the potential impact of IoT devices on data security and the risks of insecure IoT implementations."
* "Analyze how AI and machine learning can be used to both prevent and cause data breaches."
